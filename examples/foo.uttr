// it's a comment

range
	(end) = range(0, end, 1),
	(start, end, step)
		| start < end = start:range(start + step, end, step)
		| true = []

/*
comment
  /* recursive！?*/
*/

if(cond, then, else) | cond = then | true = else

if(true, "true!", "false!")
if(false, "true!", "false!")
if(null, "true!", "false!")

map(fun, x:xs) = fun(x):map(fun, xs)
map(_, []) = []

foldl
	(fun, l, []) = l,
	(fun, l, r:rs) = foldl(fun, fun(l, r), rs)

reverse_
	([], ys) = ys,
	(x:xs, ys) = reverse_(xs, x:ys)
reverse(l) = reverse_(l, [])

// join, concat

id x = x

fail() | false = nil

fb x
	| x % 15 == 0 = "fizzbuzz"
	| x % 3 == 0 = "fizz"
	| x % 5 == 0 = "buzz"
	| x = str(x)

range(10)

map(id, range(10))

map(fb, range(100))


;[ 1, 2, "3", {a:4}, [5], [a="ok"]][5](6)
;[a=[a="ok"]](1)("Oops")


fn {subject, verb, predicate} = subject + "は" + predicate + "が" + verb + "です"

fn({subject: "私", verb: "好き", predicate: "りんご"})

hoge(l, r) = {type: "hoge", l, r}

hoge("l!", hoge("rl!", "rr!"))

;[hoge(x, y) = [x, y], _ = null](hoge("l!", hoge("rl!", "rr!")))
;[hoge(x, hoge(y, z)) = [x, y, z], hoge(x, y) = [x, y], _ = null](hoge("l!", hoge("rl!", "rr!")))
