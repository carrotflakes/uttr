// it's a comment

import "prelude.uttr"

{
  a: 1,
  b: -1.2,
  c: "3",
	d: [true, false, null],
  e: [[], [1], [1, 2]]
}

{a: 1, a: 2}

;[1, 2, 3][2]

/*
comment
  /* recursiveÔºÅ?*/
*/

if(true, "true!", "false!")
if(false, "true!", "false!")
if(null, "true!", "false!")

reverse([1, 2, 3])

id x = x

fail() | false = null

fb x
	| x % 15 == 0 = "fizzbuzz"
	| x % 3 == 0  = "fizz"
	| x % 5 == 0  = "buzz"
	| x           = str(x)

range(10)

map(id, range(10))

map(fb, range(100))


;[ 1, 2, "3", {a:4}, [5], [a="ok"]][5](6)
;[a=[a="ok"]](1)("Oops")



data1(l, r) = {type: "data1", l, r}

data1("l!", data1("rl!", "rr!"))

;[data1(x, y) = [x, y], _ = null](data1("l!", data1("rl!", "rr!")))
;[data1(x, data1(y, z)) = [x, y, z], data1(x, y) = [x, y], _ = null](data1("l!", data1("rl!", "rr!")))

;map([x=x+1], [1, 2, 3])

fff x = x + y + z
  { y = x + x ;
	 	z = x + y }

fff(3)


fib n | 1 < n = fib(n - 1) + fib(n - 2) | true = n

fib(10)

;[(a, a)=true, (a, b)=false](1, 1)
;[(a, a)=true, (a, b)=false](1, 2)

json([1, "Hello", 1.2, true, false, null, {a: 1, "b": 2}])


;{
	a: 1,
	...{a: 2, b: 3, c: 4},
	b: 5
}

isPrime(n)
  | n <= 1 = false
	| true   = f(n-1)
  { f(x)
	    | x == 1     = true
	    | n % x == 0 = false
			| true       = f(x-1) }

map([x = [x, isPrime(x)]], range(20))
filter(isPrime, range(100))

;[1 && 2, 1 && 2 && 3, 1 || 2, false || 1, false || null || 1, false || null, null || false, null || null]

//g(x, y, z) = `$x$a ,$y$`

g(x, y, z) = `$x$, $y$, $z$!`

;g("Taka", "Tora", "Batta")
;`
can new lines in template literal
`
